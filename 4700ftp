#!/usr/bin/env python3
import os
import socket
import argparse
from urllib.parse import urlparse


# sends the command to the server with the proper syntax for ftp
def send_command(sock, command):
    print(f"Sending command: {command}")
    sock.sendall(command.encode() + b"\r\n")
    response = sock.recv(1024).decode()
    if response.startswith('4') or response.startswith('5') or response.startswith('6'):
        print(response)
        quit_command(sock)
    return response


# connects to the ftp server on port 21
def connect_to_ftp(user, pwd, port=21):
    # Regular socket connection with TCP
    socks = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    socks.connect(("ftp.4700.network", port))
    if not socks:
        print("not working here")
    response = socks.recv(1024).decode()
    print("Initial response:", response)
    if not response.startswith('220'):
        raise Exception("FTP not working")
    response_user = send_command(socks, f"USER {user}")
    print("USER response:", response_user)
    response_pass = send_command(socks, f"PASS {pwd}")
    print("PASS response:", response_pass)
    return socks


# ensure file type for transfer
def type_command(socks):
    response = send_command(socks, "TYPE I")
    return response


# sets the connect to stream mode
def mode_command(socks):
    response = send_command(socks, "MODE S")
    return response

# sets the connection to file-oriented mode
def stru_command(socks):
    response = send_command(socks, "STRU F")
    return response

# opens the data channel and sets the proper
# connection to data channel the return the channel
def pasv_command(socks):
    type_response = type_command(socks)
    mode_response = mode_command(socks)
    stru_response = stru_command(socks)

    response = send_command(socks, "PASV")
    if "227" not in response:
        print("PASV response did not work")

    # gets the contents of the response needed to retrieve ip and port numbers
    start_info = response.find("(") + 1
    end_info = response.find(")")
    number = response[start_info:end_info].split(",")
    ip = ".".join(number[0:4])

    port = (int(number[4]) * 256) + int(number[5]) # performs the calculations need to get the port number
    data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # sets the connection to data channel
    data_socket.connect((ip, port)) # connection to the data socket

    if (response.startswith('4') or response.startswith('5')
            or response.startswith('6')): # ensures that if there are any issues the program should quit
        print(response)
        quit_command(socks)

    return data_socket


def list_command(socks):
    data_socket = pasv_command(socks)  # opens the data channel
    response = send_command(socks, "LIST") # sends the command to the server


    directory = []
    while True:
        chunk = data_socket.recv(1024).decode()
        if not chunk:  # Check if the chunk is empty, meaning end of data
            break
        directory.append(chunk) # Append received data chunks to directory list
    response_2 = ''.join(directory)
    data_socket.close() # Close the data socket after receiving data
    print(response_2)
    return directory, response_2


# removes a file from the server
def dele_command(socks, filename):
    response = send_command(socks, f"DELE {filename}") # Send DELETE command to server
    print("deleted file:" + filename)
    return response

# Creates a new directory on the server
def mkd_command(socks, dir_name):
    response = send_command(socks, f"MKD {dir_name}")  # Send MKD command to create directory
    return response

# Removes a directory from the server
def rmd_command(socks, dir_name):
    response = send_command(socks, f"RMD {dir_name}")
    return response

# Stores (uploads) a file to the FTP server
def stor_command(socks, file_sor, file_dest):
    data_socket = pasv_command(socks)
    response = send_command(socks, f"STOR {file_dest}") # Send STOR command to store the file
    with open(file_sor, "rb") as f: # open local file in binary read mode
        while chunk := f.read(1024):
            data_socket.sendall(chunk)  # send info to server
    data_socket.close() # close socket
    response = socks.recv(1024).decode() # Receive server response
    print(response)




def retr_command(socks, file_source, file_dest):
    data_socket = pasv_command(socks) # opens data channel
    response = send_command(socks, f"RETR {file_source}") # send the RETR common to retrieve file
    with open(file_dest, 'wb') as file_download_to:
        print(f"file download to: {file_dest}")
        while True:
            chunk = data_socket.recv(1024)
            if not chunk: # Stop when no more data is received
                break
            file_download_to.write(chunk)
    response = socks.recv(1024).decode()
    print(response)
    data_socket.close()

# Closes FTP connection
def quit_command(socks):
    response = send_command(socks, "QUIT")  # Send QUIT command to close connection
    return response  # Return server response


def main():
    parser = argparse.ArgumentParser()
    sock = None
    name = ''

    parser.add_argument("operation", choices=["ls", "mkdir", "rm", "rmdir", "cp", "mv"],
                        help="FTP operation to perform")
    parser.add_argument("arguments", nargs="+")  # Accept one or more arguments
    args = parser.parse_args()

    # extracts the information needed to
    # connect to socket based of arguments

    # If first argument is an FTP URL
    if args.arguments[0].startswith("ftp://"):
        parser_url = urlparse(args.arguments[0])
        username = parser_url.username
        password = parser_url.password
        name = parser_url.path
        sock = connect_to_ftp(username, password)
    # If second argument is an FTP URL
    elif args.arguments[1].startswith("ftp://"):
        parser_url = urlparse(args.arguments[1])
        username = parser_url.username
        password = parser_url.password
        name = parser_url.path
        print("got to connect to socket")
        sock = connect_to_ftp(username, password)

    # If connection failed
    if not sock:
        print("Failed to connect to FTP server.")
        return

    # Handle different FTP operations
    if args.operation == "ls":
        list_command(sock)
    elif args.operation == "mkdir":
        mkd_command(sock, name)
    elif args.operation == "rm":
        dele_command(sock, name)
    elif args.operation == "rmdir":
        rmd_command(sock, name)
    elif args.operation == "cp":
        file_source = args.arguments[0]  # has the  server
        file_dest = args.arguments[1]
        if file_source.startswith("ftp://"): # If copying from FTP
            parser_url = urlparse(file_source)
            file_source = parser_url.path
            retr_command(sock, file_source, file_dest)
        else:
            if file_dest.startswith("ftp://"): # If copying to FTP
                parser_url = urlparse(file_dest)
                file_dest = parser_url.path
                stor_command(sock, file_source, file_dest)
    elif args.operation == "mv":
        file_source = args.arguments[0] # would have local if not in if not statments
        file_destination = args.arguments[1]
        if file_source.startswith("ftp://"):
            parser_url = urlparse(file_source)
            file_source = parser_url.path # has the server
            retr_command(sock, file_source, file_destination)
            dele_command(sock, file_source)
        else:
            if file_destination.startswith("ftp://"):  # If moving to FTP
                parser_url = file_destination(args.arguments[1])
                file_dest = parser_url.path
            stor_command(sock, file_source, file_destination) # Upload file
    sock.close()


if __name__ == '__main__':
    main()
